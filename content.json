{"meta":{"title":"EdisonKo's Blog","subtitle":"Never stop.","description":null,"author":"EdisonKo","url":"https://blog.reciyun.com","root":"/"},"pages":[{"title":"","date":"2014-11-30T17:40:12.000Z","updated":"2020-01-12T09:39:44.448Z","comments":false,"path":"about/index.html","permalink":"https://blog.reciyun.com/about/index.html","excerpt":"","text":"About me本人男，1990年出生，现居厦门，手游客户端程序。于小学开始接触GameBoy以及PC游戏，至今依然热爱游戏。初中开始接触编程，初三接触到游戏制作工具RPGMarker。后于2009年考入福建师范大学数学与计算机科学学院并于2013年毕业。曾担任动作卡牌游戏《嘿哟三国》《雷鸣三国》《萌将风云》客户端主程，负责客户端框架搭建以及游戏核心玩法设计。现于厦门知名游戏公司担任Unity客户端，负责框架开发及游戏研发。 ContactQQ：178424487E-mail：koalli#msn.com"},{"title":"categories","date":"2015-10-24T10:48:49.000Z","updated":"2020-01-12T09:39:44.448Z","comments":false,"path":"categories/index.html","permalink":"https://blog.reciyun.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2015-10-24T10:51:30.000Z","updated":"2020-01-12T09:39:44.448Z","comments":false,"path":"tags/index.html","permalink":"https://blog.reciyun.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"踏出新的一步","slug":"my-new-step","date":"2019-09-01T20:38:15.000Z","updated":"2020-01-12T09:39:44.448Z","comments":true,"path":"2019/09/01/my-new-step/","link":"","permalink":"https://blog.reciyun.com/2019/09/01/my-new-step/","excerpt":"前不久因为公司新项目决定继续换皮，做了多年美其名曰动作卡牌手游，其实最初这个项目的游戏原型只是我照着刀塔传奇的玩法写了不到一个礼拜的代码。虽然期间设计了许多有趣的角色机制，但是至今这个项目也已经换了两次皮，项目中充斥着策划说可能会用但做完再也没想起的舍不得丢弃的功能、赶进度思考不周而导致难以扩展和维护的设计、写了详细的说明但每次策划要用都要再问一次的复杂配置项。","text":"前不久因为公司新项目决定继续换皮，做了多年美其名曰动作卡牌手游，其实最初这个项目的游戏原型只是我照着刀塔传奇的玩法写了不到一个礼拜的代码。虽然期间设计了许多有趣的角色机制，但是至今这个项目也已经换了两次皮，项目中充斥着策划说可能会用但做完再也没想起的舍不得丢弃的功能、赶进度思考不周而导致难以扩展和维护的设计、写了详细的说明但每次策划要用都要再问一次的复杂配置项。 即将迈入30岁这个新的阶段，无论是家庭还是工作都对我提出了新的更高的要求。系统策划经常讲不清楚自己设计的东西，项目管理人员经常快下班了才跑出来安排工作，受够了没有意义的惯性加班甚至有时要舍弃难得的小长假，没有自己的时间没有机会学习更多新的专业知识，所以此次我毅然决然辞职离开了这家工作了4年的公司。 有点算裸辞吧，好在这些年一旦空闲下来，总是会自己写一些小玩意玩。我在家里休息了一个多月，在这段期间我白天会去外面溜溜儿子，他睡了我就让他妈陪着睡我自己窝到书房写点代码。期间装了CocosCreator引擎搭客户端框架，同时用Node.js搭服务端框架。 休息的时间越长就越不想回去上班，意识到这点后我就装了几个App更新了一下自己的简历，然后也没有刻意去投简历就陆陆续续有公司联系我面试。期间也经历了不少有趣的公司，比如有HR给了张JavaScript的笔试题让我做，这也是唯一一家面试客户端主程给笔试题的公司。甚至有《碧蓝航线》开发团队的面试邀请，期间虽然聊得挺不错的但可惜没有缘分。 最后我选择的这家公司，面试时我并不乐观，因为是老牌的研发团队并且有多款著名的项目在运营，但后来团队并不在乎我薄弱的Unity基础，愿意把我安排到新的Unity项目中去。入职后我就在技术主管的安排下先在一个Creator项目中协助，并且负责一些新功能的研发。一个月后新项目的客户端工作正式启动，这是一个Unity+xLua的项目，早期由我负责ugui和FairyGUI的评估，lua部分以及UI管理的框架设计。 随着Unity使用的深入，两个引擎对比之下Creator除了h5和微信小游戏几乎没有任何优势，Creator项目团队里的人员几乎全都在吐槽Creator，更别提此前更加简陋的cocos2d-x了。当然我们虽然都在吐槽cocos，但是毕竟是cocos打破了引擎的垄断，降低了游戏开发的门槛，让更多热爱游戏的开发人员能够实现自己的想法。但我们从另外一方面来想，降低门槛也引入了更多水平参差不齐的人，使得整个行业相对混乱。 在新的工作环境中，作为一个闭门造车多年的程序员，我竟然很快就得到了一次在公司各职能部门的人员面前分享Git和Git工作流经验的机会。另外在日常工作中也能和持不同设计理念的人进行深入的合作和交流，虽然偶有摩擦但对自己来说总归是一种进步。 程序员作为一种终身学习的职业，我觉得能驱动自己的还得是自己喜欢的行业，希望自己能在热爱的游戏行业里不断学习不断进步。","categories":[],"tags":[]},{"title":"组件化！游戏设计模式之ECS架构","slug":"game-ecs-design","date":"2018-04-21T11:03:20.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2018/04/21/game-ecs-design/","link":"","permalink":"https://blog.reciyun.com/2018/04/21/game-ecs-design/","excerpt":"近年来，随着移动流量的资费下降以及4G网络的普及，越来越多的手游抛弃了以往短链接的网络方式，开始使用WebSocket、SocketIO等长链接方案来实现实时的消息处理。无论是《王者荣耀》还是《绝地求生》，都是长链接的佼佼者，具体的细节网上有一些相关的文章有讨论。至于长链接和短链接更有千秋，这不是我们这篇文章要探讨的问题，我们要讨论的是针对长链接的网络连接方式，\b对架构进行针对性的设计。","text":"近年来，随着移动流量的资费下降以及4G网络的普及，越来越多的手游抛弃了以往短链接的网络方式，开始使用WebSocket、SocketIO等长链接方案来实现实时的消息处理。无论是《王者荣耀》还是《绝地求生》，都是长链接的佼佼者，具体的细节网上有一些相关的文章有讨论。至于长链接和短链接更有千秋，这不是我们这篇文章要探讨的问题，我们要讨论的是针对长链接的网络连接方式，\b对架构进行针对性的设计。 由于网络的不确定性，实现绝对的实时连接是不可能的，\b因此长链接方案给整个项目系统架构提出更高的要求。无论是客户端还是服务端都需要参与到整个设计中来，我们简单通过一个射击游戏的案例来分析。 1.玩家A的设备中，玩家A瞄准了玩家B并开枪击中了，\b玩家A告诉服务器我开枪了。 2.玩家B在\b玩家A开枪前就告诉服务器，我正在一直往前跑，并且此时服务器已经记录下玩家B的相关数据了。 这时服务器收到了玩家A发送过来开枪的消息，由于网络延迟的原因，无论是玩家A还是玩家B，他们设备中的状态都已经不是发送消息时的状态了。\b在这种情况下，服务器要判定子弹是否击中玩家B，就需要考虑网络延迟，这就需要服务端采用预测的方式来计算。 3.玩家B的设备中，玩家B在一分钟前告诉服务器，我正在一直往前跑，这时候玩家B断网了。 此时服务器通过之前保存的数据，判定玩家A已经击杀了玩家B，但是玩家B由于断网仍然保持往前跑的操作，等到\b玩家B重新连接上网络的时候，客户端会发生什么事情呢？玩家B在跑到很远的地方，周围没有任何人的情况下，莫名奇妙被\b击杀了，这显然\b不是一个好的体验。有一种简单的处理方式就是，客户端将整个战场重新设置到玩家B断网的时刻，重新将玩家们放到那个时刻，重现玩家A开枪击杀玩家B的画面，简单的说就是回放。 为了解决这种问题，我在收集资料时找到了下面这篇文章： 《守望先锋》架构设计与网络同步：http://gad.qq.com/article/detail/28682 这就是我们这篇文章所要讨论的ECS架构(Entity-Component-System)。 我们先来看Entity，从某种程度上来说它就是场景上的一个GameObject，而这个GameObject由许多的Component组合而成。 \b而Component则是负责存储状态、数据，它不包含任何的\b行为。\b比如一个GameObject有一个移动组件，这个组件记录了移动的起点、方向、速度等数据。 System在这个架构中主要负责逻辑，比如有个移动系统，在上层\b逻辑进入这个\b系统的时候，它需要筛选出所有\b的移动组件并进行相应的处理。 在System之上，还有一个负责维护所有System的World。 在守望先锋的这个架构我们可以看出来，应该尽可能将所有的数据和状态都\b从System中剥离出去，System只根据Component保存的\b状态来进行逻辑处理。在实时性要求高的游戏中，\b状态\b和数据的保存至关重要，只由Component\b来保存数据和状态的话可以很轻易地将逻辑和数据解耦。","categories":[],"tags":[{"name":"游戏设计","slug":"游戏设计","permalink":"https://blog.reciyun.com/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"Docker中使用Mysql容器","slug":"docker-guide","date":"2017-04-06T14:09:23.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2017/04/06/docker-guide/","link":"","permalink":"https://blog.reciyun.com/2017/04/06/docker-guide/","excerpt":"最近因为对Docker技术感兴趣，于是便自己学习、尝试使用。由于Docker技术这几年大热，Docker Hub上已经有了各种官方制作的镜像，比如mysql，apache等。用户可以基于官方提供的镜像，通过配置Dockerfile并且build自己的镜像。举个例子，你可以通过官方的apache镜像，把自己的应用的资源拷贝或者通过-v参数配置到apache对应的目录。在你build并且run起来这个镜像后，便是一个完整的部署后的容器。","text":"最近因为对Docker技术感兴趣，于是便自己学习、尝试使用。由于Docker技术这几年大热，Docker Hub上已经有了各种官方制作的镜像，比如mysql，apache等。用户可以基于官方提供的镜像，通过配置Dockerfile并且build自己的镜像。举个例子，你可以通过官方的apache镜像，把自己的应用的资源拷贝或者通过-v参数配置到apache对应的目录。在你build并且run起来这个镜像后，便是一个完整的部署后的容器。 Docker可以很方便地创建各种容器，比如只要运行下面两条语句，就可以创建一个mysql容器和apache容器。其中apache容器中，将/home/server/1的目录，通过-v参数配置到了容器的/var/www/html目录。 123docker run --name mysql-server -v &#x2F;home&#x2F;mysqldata:&#x2F;var&#x2F;lib&#x2F;mysql -p 3306:3306 --restart&#x3D;always -e MYSQL_ROOT_PASSWORD&#x3D;password -d mysqldocker run -d -p 8081:80 --name game-server-1 --restart&#x3D;always -v &#x2F;home&#x2F;server&#x2F;1:&#x2F;var&#x2F;www&#x2F;html php:7.0-apache 另外，你还可以方便的配置Docker Swarm集群，使得在多台硬件设备上就像只是在使用一台设备一样。 Docker的便利使得应用的部署\b变得简单快捷，同时从某种程度上来说降低了应用的运行环境互相干扰的发生。\b而对于云服务提供商来说，Docker技术也能够帮到大忙，提高硬件的使用率，为用户提供方便的容器接口等。","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.reciyun.com/tags/Docker/"}]},{"title":"Git仓库管理的思考","slug":"git-repo-management","date":"2016-08-31T22:39:34.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2016/08/31/git-repo-management/","link":"","permalink":"https://blog.reciyun.com/2016/08/31/git-repo-management/","excerpt":"在新项目立项之初，我们商定使用Git来做版本控制。我在内网安装了一台Ubuntu服务器，并且安装了gogs来做Git仓库管理以及人员权限的管理。 我们沿袭了以往使用SVN的习惯，将所有的资源都放在一个仓库下，然而随着时间的推移，以及策划、美术人员的参与，Git仓库的容量越来越难以收拾。","text":"在新项目立项之初，我们商定使用Git来做版本控制。我在内网安装了一台Ubuntu服务器，并且安装了gogs来做Git仓库管理以及人员权限的管理。 我们沿袭了以往使用SVN的习惯，将所有的资源都放在一个仓库下，然而随着时间的推移，以及策划、美术人员的参与，Git仓库的容量越来越难以收拾。 恰逢项目代理给了多个国家，需要能灵活的管理各个语言版本的资源，并且为了方便各语言版本的测试，我们对整个Git仓库进行了分拆。经过了几番讨论，最后选定了我设想的方案，这个方案\b的主要分成两个部分： 1、项目的主要核心资源，比如美术资源、代码、数据表存放在主仓库，这部分资源应该是所有版本都一致的。 2、项目的特异化资源，主要是存放一些\b不同地区的语言资源、美术资源、数据表等，根据不同地区的特殊要求存放资源，并用分支来区分不同的版本，程序运行时优先读取这部分资源。 在测试阶段，这个结构可以很方便的切换分支进行不同语言版本的测试，而程序部署时配合使用脚本就可以根据不同的版本进行资源的整理、打包。","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.reciyun.com/tags/git/"}]},{"title":"游戏角色模型设计","slug":"game-actor-model-design","date":"2016-01-05T23:20:19.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2016/01/05/game-actor-model-design/","link":"","permalink":"https://blog.reciyun.com/2016/01/05/game-actor-model-design/","excerpt":"1、设计原则我们需要设计一个角色模型，独立于角色数值以及角色动画之外，能够根据不同的角色类型，表现出不同的行为。我们游戏采用cocos2d-x引擎，游戏中角色逻辑都是使用Lua来编写，而动画播放部分使用了C++来处理。Lua能够实现脚本的热更新，不仅在编写角色的脚本时很方便，同时也给后期的更新维护带来了相当大的便利。在不需要更新二进制文件时，只需要更新资源即可，省去了App Store审核的麻烦。","text":"1、设计原则我们需要设计一个角色模型，独立于角色数值以及角色动画之外，能够根据不同的角色类型，表现出不同的行为。我们游戏采用cocos2d-x引擎，游戏中角色逻辑都是使用Lua来编写，而动画播放部分使用了C++来处理。Lua能够实现脚本的热更新，不仅在编写角色的脚本时很方便，同时也给后期的更新维护带来了相当大的便利。在不需要更新二进制文件时，只需要更新资源即可，省去了App Store审核的麻烦。 2、基本类型基于以上原则，我们需要三个不同的类型。 首先是角色模型类。角色模型类主要是一些通用的属性以及行为，例如发射子弹，创建播放角色动画等。然后是角色数值类则专门处理数值相关的事务，例如取得攻击力，添加增益属性等。最后一个就是角色类，这个类决定了某个角色的行为，比如某个角色释放技能时应该播放什么动作。 以下是一个简单的UML图。 3、几种角色行为的思考角色行为在我进入游戏行业的这几年里，接触过的有这么两种： (1)、角色由外部的控制器来控制，例如回合制游戏。回合制游戏通常由战场类来控制角色行为，而战场类一般会有一个状态机。回合制游戏在没有玩家行为参与的情况下，在回合划分清楚的情况下，往往可以在战斗前计算出每一个行为的结果，因此这类游戏常常带有跳过战斗功能，而战场类状态机主要作用就是控制整个战斗的回放。在这样的设计下，简单的修改就可以实现服务器计算战斗结果，而代价是玩家的参与感相对薄弱。 (2)、随着游戏行业的发展，业内开始出现类似《刀塔传奇》这样玩家行为对游戏影响比较重要的游戏。由于每一个角色行为难以预期，角色之间又往往包含各种各样互相影响的技能（可能我在释放技能的时候却被别人打断了），而每一个角色受到外部影响或者自身技能影响，甚至可能会改变自己的在一段时间内的行为。因此就比较难以使用一个战场类的状态机来控制。我们最后设计完成的方案是每个角色自行维护一个状态机，为了最大限度灵活地控制角色，让角色可以做更多的事，在处理角色很多行为的地方设计了回调，例如角色被杀的时候触发什么事件，角色杀死别人的时候触发什么事件。但是这样做的结果与上面相反，虽然玩家的参与感强了，角色行为的设计也能够更加灵活，但是对服务器部分来说，就比较难以去实现完全模拟战斗这样的计算。因此如果战斗需要服务器配合验证的话，客户端部分需要在设计之初提前进行针对性的设计，提前设计可以预测的行为以及延迟补偿等机制。 4、几年后的思考整套游戏的结构、\b模型是在2014年下半年的时候初步完成，随着时间的推移，角色的功能不断扩展，虽然这套架构可以很方便的扩展角色行为，但是随着需求的一步步深化，也逐渐开始显得力不从心。现今大热的《王者荣耀》等对玩家实时操作要求高的游戏，不断地推动着手游行业向重度游戏的方向发展，随着流量价格下调以及网络环境不断优化，对于\b游戏架构的设计也在不断提高。许多以前端游网游时代的技术又重新开始被手游使用，网游的技术这几年间似乎根本没有发展，什么设计模式等等似乎全部都停留在端游页游时代。回想自己从业这几年，从一开始不断鼓吹碎片时间，到现在强调重度游戏、强调玩家的参与，仔细一看似乎手游也走上了前几年端游开始要没落的时代，而腾讯这样的大厂却又回过头\b在布局WeGame平台，其他的厂商似乎也只能被牵着鼻子走。而我们这些构建虚拟世界的程序员们，在学好技术完成工作之余，还能走多远？又能走到哪里去？","categories":[],"tags":[{"name":"游戏设计","slug":"游戏设计","permalink":"https://blog.reciyun.com/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"}]},{"title":"流氓软件遭遇战","slug":"software-fuck-you","date":"2015-03-22T18:45:00.000Z","updated":"2020-01-12T09:39:44.448Z","comments":true,"path":"2015/03/22/software-fuck-you/","link":"","permalink":"https://blog.reciyun.com/2015/03/22/software-fuck-you/","excerpt":"大概是去年的时候给自己用的笔记本装了Windows 8，用了蛮长一段时间。最近发现电脑越来越卡，打开进程管理器那个惨不忍睹。 仔细看下来，单单腾讯，就有QQ、管家、手机助手之类的进程好几个，加上什么搜狗输入法、云输入、手机连接进程一堆。虽然早知道国内这些厂商的节操论斤卖，但是还是搞不懂你一个输入法要连接手机做什么。 身为IT从业人员，以前上大学的时候，有同学问老师说360到底有没有用。老师没有正面回答，只记得大概是这么一个意思：支持国产嘛 但是之后3Q大战，腾讯“艰难的决定”大招一出，一开始有些人气愤不过卸载了QQ，但是据我所知大部分之后都装回去了。 在知乎上有这么一个话题： BAT哪家最难干掉？http://www.zhihu.com/question/28534508/answer/41297139 其中有这么一张图，是表示腾讯用户的关系图。 我们都知道三角形很稳定，那么这个由无数三角形编织出来的网状图其中的含义就显而易见了。","text":"大概是去年的时候给自己用的笔记本装了Windows 8，用了蛮长一段时间。最近发现电脑越来越卡，打开进程管理器那个惨不忍睹。 仔细看下来，单单腾讯，就有QQ、管家、手机助手之类的进程好几个，加上什么搜狗输入法、云输入、手机连接进程一堆。虽然早知道国内这些厂商的节操论斤卖，但是还是搞不懂你一个输入法要连接手机做什么。 身为IT从业人员，以前上大学的时候，有同学问老师说360到底有没有用。老师没有正面回答，只记得大概是这么一个意思：支持国产嘛 但是之后3Q大战，腾讯“艰难的决定”大招一出，一开始有些人气愤不过卸载了QQ，但是据我所知大部分之后都装回去了。 在知乎上有这么一个话题： BAT哪家最难干掉？http://www.zhihu.com/question/28534508/answer/41297139 其中有这么一张图，是表示腾讯用户的关系图。 我们都知道三角形很稳定，那么这个由无数三角形编织出来的网状图其中的含义就显而易见了。 3Q大战之后无疑更加奠定了腾讯无可动摇的地位，而MSN等即时通讯软件也陆续退出市场。另外值得提到的一点是，阿里一直想抢腾讯在聊天这块的市场，只是新推出的“来往”也没做出来什么成绩。 反倒是腾讯自家的微信在移动平台强势得都快把手机QQ干掉了，不过微信的PC端相对简陋这点可能也是腾讯权衡的结果吧。毕竟把PC端的QQ干掉没什么好处啊，那么多产品的入口都指望着QQ不是？ 回过头来讲，这些巨头们，这么多年来慢慢算是垄断了很大一部分的市场，然后自然而然就开始耍流氓了。 例如百度，你搜个软件他都想在你电脑上装个东西，hao123被收购后反正还是大流氓。腾讯呢，全方位的狙击对手，我们不说抄袭这件事，反正整个社会都是一个急功近利的基调，抄袭随处可见。阿里呢，前不久“支付婊”事件，下架了wp平台的应用，毕竟人家有钱任性，1%的用户算个什么东西。 其实这些流氓都是被用户养起来的，特别是QQ，根本就成为了生活工作的一部分，怎么摆脱？重做系统后我就一直在思考这个问题，QQ除外，其他的东西还是有解决方案的，毕竟依赖不像QQ这么大。 可以举几个例子，例如浏览器，身为程序员几乎每个人都会用Chrome，Chrome打开网页快、扩展功能强大真的让人欲罢不能。大学几年到工作这几年，一直都离不开Chrome。 至于输入法，身为从智能ABC时代过来的人，搜狗输入法的出现确实极大的提高的输入效率。打字快，字库丰富，皮肤很多，可是渐渐变得臃肿、迟缓。这些年我也用过QQ输入法，百度输入法，可是并不是非常合我心意。最后我选择了谷歌输入法，虽然谷歌在国内各种残废，但是毕竟是一家良心公司，值得信赖。 我向来是不装杀毒软件的，因为我基本上没有访问陌生的网站，常逛的网站就那么几个，相对来说还是比较安全。而感觉除了前几年冲击波、震荡波、熊猫烧香之类传播性、破坏性比较大的病毒，这几年似乎没听说过什么留下名字的病毒，因此我也就只用系统自带的Windows Defender了，另外把账户控制的通知级别提高了，系统级别的操作会提示，同时开启了Windows Update开保持更新漏洞以及病毒库。 而卫士、管家这类软件，以前我装它们主要用于更新补丁漏洞，后来听说这些软件给你装的补丁改了签名，这个就很可怕了，谁知道你到底做了什么东西。同时它们也能做一些启动项管理、性能优化之类的事，这些对我倒是意义不大，性能优化这种事情，做过了头反而影响性能。倒是垃圾清理的功能时常能清理掉好几G的东西，不过我有过清理后Office出问题不能用的前车之鉴，所以平常清理的时候倒是比较注意。不过它们经常弹出来一键清理什么的我是很害怕的，还有插上手机右下角弹出来一堆对话框，桌面上出现一堆浮框，简直让人恶心，因此重做系统后我也是没有再装它们。 其实如果自己能把握好哪些软件是需要的，哪些软件是不需要的，整个Windows系统的效率会得到不少的提升，但其实很多电脑城一键装机的普通用户要做到这点并不容易，有些工具确实能提供便利，但同时也会把人变成傻逼。","categories":[],"tags":[]},{"title":"随笔11/30","slug":"essay-2014-11-30","date":"2014-11-30T15:20:19.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2014/11/30/essay-2014-11-30/","link":"","permalink":"https://blog.reciyun.com/2014/11/30/essay-2014-11-30/","excerpt":"刚刚在写Hexo访问缓慢的解决方法时才发现，上一次写文章的时候刚好是上个月的30号。不知不觉过去了一个月，时间飞快。 想起来上周回家带老妈一起去看了《星际穿越》，作为一个伪科幻迷我当然要假装我全看懂了。然后一些老妈看不懂的部分，我还要凭借着我高中那点微薄的物理知识勉强给我老妈解释。什么你问大学物理？大学物理我可不记得有讲过宇宙啊相对论啊这些神奇的东西。","text":"刚刚在写Hexo访问缓慢的解决方法时才发现，上一次写文章的时候刚好是上个月的30号。不知不觉过去了一个月，时间飞快。 想起来上周回家带老妈一起去看了《星际穿越》，作为一个伪科幻迷我当然要假装我全看懂了。然后一些老妈看不懂的部分，我还要凭借着我高中那点微薄的物理知识勉强给我老妈解释。什么你问大学物理？大学物理我可不记得有讲过宇宙啊相对论啊这些神奇的东西。 电影里面最让人震撼的大概就是主人公们降落在那个有着巨大潮汐的星球，回来的时候居然已经过去了20几年。虽然男主最后历尽劫难回到人类的库珀空间站，面对垂垂老矣的女儿以及一群自己根本不认识的后代子孙。普通人实在难以想象这种情况，而且这种情况也确实残酷。 上周无聊又把阁楼里翻出来的相册拿出来看了，找到了爸妈当年(1988年)谈恋爱时留下的照片。一个不小心20多年过去了，我也已经到了爸妈当年的年龄。其实最残酷的也就是时间了啊，他只会不急不缓，一声不吭地在爸妈脸上刻下皱纹，拖着逼着你长大去承担。 我认识一个从小就患有杜氏进行性肌营养不良的朋友，当时是因为他做网站认识的。这个病没有治愈的方法，在国内最好的情况下也就是活到20多岁。以前我总念着要去看看他，看看这个从小学认识到大学的网友，没想到他在13年4月底就已经走了。 小时候我总是很好奇，为什么他都不用读书上学，长大了才知道他慢慢的开始没办法吃饭了，没办法打字了。死亡对他，对他父母来说，是个随时准备响起的闹钟，并且终将响起。 写到这里我想起《三体》里面的一句话： 死亡是唯一一座永远亮着的灯塔，不管你向哪里航行，最终都得转向它指引的方向。一切都会逝去，只有死神永生。 或许我们能做的，就是多欣赏沿途的风景，享受每一分每一秒，不要白白蹉跎了岁月吧。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://blog.reciyun.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"Hexo部分模版在国内加载缓慢的解决方案","slug":"hexo-load-slowly","date":"2014-11-30T14:21:08.000Z","updated":"2020-01-12T09:39:44.448Z","comments":true,"path":"2014/11/30/hexo-load-slowly/","link":"","permalink":"https://blog.reciyun.com/2014/11/30/hexo-load-slowly/","excerpt":"前段时间无聊在Github上托管了Hexo，并且开始在Github里写一些零零碎碎的东西。一开始感觉速度有点慢，习惯性的把原因归到了“Github毕竟是个外国网站，GFW呵呵我去”。 然后闲逛的时候发现有一些Github的页面访问飞速，心想不对，完全没道理，于是开始在自己这边找原因。相同网络环境下为什么会出现这种情况呢？多数是因为链接了其他网站的内容导致。那么问题就明朗起来了，被GFW墙得最厉害的也就那么几个。","text":"前段时间无聊在Github上托管了Hexo，并且开始在Github里写一些零零碎碎的东西。一开始感觉速度有点慢，习惯性的把原因归到了“Github毕竟是个外国网站，GFW呵呵我去”。 然后闲逛的时候发现有一些Github的页面访问飞速，心想不对，完全没道理，于是开始在自己这边找原因。相同网络环境下为什么会出现这种情况呢？多数是因为链接了其他网站的内容导致。那么问题就明朗起来了，被GFW墙得最厉害的也就那么几个。 于是我搜索了一下Google，出来了不少东西。因为一些不能说的原因，Google的各种服务在国内访问困难。而Hexo的一些模版里因为调用到了Google的服务，所以Hexo加载也变慢了。具体说起来，是用到了Google的CDN公共库里的jQuery，还有一个是Google-Fonts，另外部分模版可能开启了Google Analytics。 解决方法呢就是把这些东西替换掉，某度也有相关的公共库，自行搜索替换即可。至于Google Analytics我是直接关掉了，有需要的可能要自己修改相关的主题。 以官方主题light来说，需要修改的地方有两个： 1themes&#x2F;light&#x2F;layout&#x2F;_partial&#x2F;after_footer.ejs 以及： 1themes&#x2F;light&#x2F;sources&#x2F;css&#x2F;_base&#x2F;variable.styl 搜索googleapis.com找到相应的链接，然后替换成可以顺利加载的链接即可。而Google Analytics则是在： 1themes&#x2F;light&#x2F;_config.yml 搜索Google Analytics设置为false即可。记得hexo g再hexo d，就可以Enjoy it啦。","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.reciyun.com/tags/Hexo/"}]},{"title":"常用git命令","slug":"git-command","date":"2014-10-30T14:33:21.000Z","updated":"2020-01-12T09:39:44.447Z","comments":true,"path":"2014/10/30/git-command/","link":"","permalink":"https://blog.reciyun.com/2014/10/30/git-command/","excerpt":"前言 最早使用git的时候大概是在2012年11月在福州一家游戏公司实习的时候，那会的工作是cocos2dx客户端开发，项目在xcode上配合git进行版本控制管理，当时学习的时候并未进行深入的学习。 实习了3个月左右我就回了学校，毕业后离开了福州来到了现在这家公司，前几天有个跟我一样在之前那家公司呆过的童鞋来公司面试，刚好我看到简历并且发现是同校的学长，无意中发现他在github上有一个自己的blog，写了一些比较有趣的东西。","text":"前言 最早使用git的时候大概是在2012年11月在福州一家游戏公司实习的时候，那会的工作是cocos2dx客户端开发，项目在xcode上配合git进行版本控制管理，当时学习的时候并未进行深入的学习。 实习了3个月左右我就回了学校，毕业后离开了福州来到了现在这家公司，前几天有个跟我一样在之前那家公司呆过的童鞋来公司面试，刚好我看到简历并且发现是同校的学长，无意中发现他在github上有一个自己的blog，写了一些比较有趣的东西。 我大概是在没上初中的时候就开始接触网页制作，那会也做过类似的个人主页，后来博客横行的时候也写过博客，基本上是写一些无关痛痒的文字，偶尔自言自语发发牢骚。后来陆陆续续认识一些站长，什么IIS啊花生壳啊也都玩过，自己也做了些乱七八糟的小网页啊电子同学录之类的东西。 后来上了高中几个同学自己凑钱买了服务器做了个班级论坛，那些数据可能至今都还在我家里的某台电脑上。再后来大学读了计算机科学与技术，也有一两个网页相关的专业，自己闲着也用WordPress之类的东西在一些VPS上写过一些心情什么的，却从来没有想过在github上玩。 这个学长的blog顿时吸引了我，于是我去搜了搜相关的资料，发现其实在github上写blog十分的方便，这种在控制台敲敲命令行管理blog的方式也让我耳目一新，稍微学习了一下就决定也抽空写点技术相关的文档啊心情什么的。 说干就干，搜索了一些资料，最后决定用github+hexo来做我这个blog，hexo的命令十分的简单，主题什么的也比较符合我的审美，通过git来部署的方式十分的方便，敲几行命令行就搞定blog的更新让人有种莫名的快感，于是我就把git的常用命令行收集整理一下，以备后用。 git clone 当你已经有一个远程的Git版本库，只需要在本地克隆一份 1git clone git:&#x2F;&#x2F;github.com&#x2F;someone&#x2F;some_project.git some_project git init和git remote 当你本地创建了一个工作目录，你可以进入这个目录，使用’git init’命令进行初始化；Git以后就会对该目录下的文件进行版本控制，这时候如果你需要将它放到远程服务器上，可以在远程服务器上创建一个目录，并把可访问的URL记录下来，此时你就可以利用’git remote add’命令来增加一个远程服务器端 1git remote add origin git:&#x2F;&#x2F;github.com&#x2F;someone&#x2F;another_project.git 查看远程仓库1git remote -v 添加远程仓库1git remote add [name] [url] git pull 从其他版本库（远程或本地）将代码更新到本地 1git pull origin master git add 将当前更改或者新增的文件加入到git的索引中，记入历史版本 1git add . git rm 从当前工作空间和索引中删除文件 1git rm &#x2F;README.md git commit 提交当前工作空间的修改内容 1git commit -m &#39;fix bug bla bla.&#39; git push 将本地commit的代码更新到远程版本库中 1git push origin master git revert 还原一个版本的修改，必须提供一个git提供的版本号哈希值 1git revert bbaf6fb5060b4875b18ff9ff637ce118256d6f20 git tag 可以给一个具体的版本号设置一个标签，这样就不需要记忆复杂的版本号哈希值了 1git tag new_version bbaf6fb5060b4875b18ff9ff637ce118256d6f20 git config 利用这个命令可以更改git的各种设置 12git config --global user.name [name]git config --global user.email [email]","categories":[],"tags":[{"name":"git","slug":"git","permalink":"https://blog.reciyun.com/tags/git/"}]}]}